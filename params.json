{"name":"Money","tagline":"Library for dealing with money and currency conversion","body":"# RubyMoney - Money\r\n\r\n[![Gem Version](https://badge.fury.io/rb/money.png)](http://badge.fury.io/rb/money)\r\n[![Build Status](https://travis-ci.org/RubyMoney/money.png?branch=master)](https://travis-ci.org/RubyMoney/money)\r\n[![Code Climate](https://codeclimate.com/github/RubyMoney/money.png)](https://codeclimate.com/github/RubyMoney/money)\r\n[![Coverage Status](https://coveralls.io/repos/RubyMoney/money/badge.png?branch=master)](https://coveralls.io/r/RubyMoney/money?branch=master)\r\n[![Dependency Status](https://gemnasium.com/RubyMoney/money.png)](https://gemnasium.com/RubyMoney/money)\r\n[![License](http://img.shields.io/license/MIT.png?color=green)](http://opensource.org/licenses/MIT)\r\n\r\n:warning: Please read the [migration notes](#migration-notes) before upgrading to a new major version.\r\n\r\nIf you miss String parsing, check out the new [monetize gem](https://github.com/RubyMoney/monetize).\r\n\r\n## Contributing\r\n\r\nSee the [Contribution Guidelines](https://github.com/RubyMoney/money/blob/master/CONTRIBUTING.md)\r\n\r\n## Introduction\r\n\r\nThis library aids one in handling money and different currencies.\r\n\r\n### Features\r\n\r\n- Provides a `Money` class which encapsulates all information about an certain\r\n  amount of money, such as its value and its currency.\r\n- Provides a `Money::Currency` class which encapsulates all information about\r\n  a monetary unit.\r\n- Represents monetary values as integers, in cents. This avoids floating point\r\n  rounding errors.\r\n- Represents currency as `Money::Currency` instances providing an high level of\r\n  flexibility.\r\n- Provides APIs for exchanging money from one currency to another.\r\n- Has the ability to parse a money and currency strings\r\n  into the corresponding Money/Currency object.\r\n\r\n### Resources\r\n\r\n- [Website](http://rubymoney.github.com/money)\r\n- [API Documentation](http://rubydoc.info/gems/money/frames)\r\n- [Git Repository](http://github.com/RubyMoney/money)\r\n\r\n### Notes\r\n\r\n- Your app must use UTF-8 to function with this library. There are a\r\n  number of non-ASCII currency attributes.\r\n- This app requires JSON. If you're using JRuby < 1.7.0\r\n  you'll need to add `gem \"json\"` to your Gemfile or similar.\r\n\r\n## Downloading\r\n\r\nInstall stable releases with the following command:\r\n\r\n    gem install money\r\n\r\nThe development version (hosted on Github) can be installed with:\r\n\r\n    git clone git://github.com/RubyMoney/money.git\r\n    cd money\r\n    rake install\r\n\r\n## Usage\r\n\r\n``` ruby\r\nrequire 'money'\r\n\r\n# 10.00 USD\r\nmoney = Money.new(1000, \"USD\")\r\nmoney.cents     #=> 1000\r\nmoney.currency  #=> Currency.new(\"USD\")\r\n\r\n# Comparisons\r\nMoney.new(1000, \"USD\") == Money.new(1000, \"USD\")   #=> true\r\nMoney.new(1000, \"USD\") == Money.new(100, \"USD\")    #=> false\r\nMoney.new(1000, \"USD\") == Money.new(1000, \"EUR\")   #=> false\r\nMoney.new(1000, \"USD\") != Money.new(1000, \"EUR\")   #=> true\r\n\r\n# Arithmetic\r\nMoney.new(1000, \"USD\") + Money.new(500, \"USD\") == Money.new(1500, \"USD\")\r\nMoney.new(1000, \"USD\") - Money.new(200, \"USD\") == Money.new(800, \"USD\")\r\nMoney.new(1000, \"USD\") / 5                     == Money.new(200, \"USD\")\r\nMoney.new(1000, \"USD\") * 5                     == Money.new(5000, \"USD\")\r\n\r\n# Assumptive Currencies\r\nMoney.assume_from_symbol = true\r\nMoney.parse(\"$100\") == Money.new(10000, \"USD\")\r\nMoney.parse(\"€100\") == Money.new(10000, \"EUR\")\r\nMoney.parse(\"£100\") == Money.new(10000, \"GBP\")\r\n\r\n# Currency conversions\r\nsome_code_to_setup_exchange_rates\r\nMoney.new(1000, \"USD\").exchange_to(\"EUR\") == Money.new(some_value, \"EUR\")\r\n```\r\n\r\n## Currency\r\n\r\nCurrencies are consistently represented as instances of `Money::Currency`.\r\nThe most part of `Money` APIs allows you to supply either a `String` or a\r\n`Money::Currency`.\r\n\r\n``` ruby\r\nMoney.new(1000, \"USD\") == Money.new(1000, Currency.new(\"USD\"))\r\nMoney.new(1000, \"EUR\").currency == Currency.new(\"EUR\")\r\n```\r\n\r\nA `Money::Currency` instance holds all the information about the currency,\r\nincluding the currency symbol, name and much more.\r\n\r\n``` ruby\r\ncurrency = Money.new(1000, \"USD\").currency\r\ncurrency.iso_code #=> \"USD\"\r\ncurrency.name     #=> \"United States Dollar\"\r\n```\r\n\r\nTo define a new `Money::Currency` use `Money::Currency.register` as shown\r\nbelow.\r\n\r\n``` ruby\r\ncurr = {\r\n  :priority        => 1,\r\n  :iso_code        => \"USD\",\r\n  :iso_numeric     => \"840\",\r\n  :name            => \"United States Dollar\",\r\n  :symbol          => \"$\",\r\n  :subunit         => \"Cent\",\r\n  :subunit_to_unit => 100,\r\n  :separator       => \".\",\r\n  :delimiter       => \",\"\r\n}\r\n\r\nMoney::Currency.register(curr)\r\n```\r\n\r\nThe pre-defined set of attributes includes:\r\n\r\n- `:priority` a numerical value you can use to sort/group the currency list\r\n- `:iso_code` the international 3-letter code as defined by the ISO 4217 standard\r\n- `:iso_numeric` the international 3-digit code as defined by the ISO 4217 standard\r\n- `:name` the currency name\r\n- `:symbol` the currency symbol (UTF-8 encoded)\r\n- `:subunit` the name of the fractional monetary unit\r\n- `:subunit_to_unit` the proportion between the unit and the subunit\r\n- `:separator` character between the whole and fraction amounts\r\n- `:delimiter` character between each thousands place\r\n\r\nAll attributes are optional. Some attributes, such as `:symbol`, are used by\r\nthe Money class to print out a representation of the object. Other attributes,\r\nsuch as `:name` or `:priority`, exist to provide a basic API you can take\r\nadvantage of to build your application.\r\n\r\n### :priority\r\n\r\nThe priority attribute is an arbitrary numerical value you can assign to the\r\n`Money::Currency` and use in sorting/grouping operation.\r\n\r\nFor instance, let's assume your Rails application needs to render a currency\r\nselector like the one available\r\n[here](http://finance.yahoo.com/currency-converter/). You can create a couple of\r\ncustom methods to return the list of major currencies and all currencies as\r\nfollows:\r\n\r\n``` ruby\r\n# Returns an array of currency id where\r\n# priority < 10\r\ndef major_currencies(hash)\r\n  hash.inject([]) do |array, (id, attributes)|\r\n    priority = attributes[:priority]\r\n    if priority && priority < 10\r\n      array[priority] ||= []\r\n      array[priority] << id\r\n    end\r\n    array\r\n  end.compact.flatten\r\nend\r\n\r\n# Returns an array of all currency id\r\ndef all_currencies(hash)\r\n  hash.keys\r\nend\r\n\r\nmajor_currencies(Money::Currency.table)\r\n# => [ :usd, :eur, :bgp, :cad ]\r\n\r\nall_currencies(Money::Currency.table)\r\n# => [ :aed, :afn, all, ... ]\r\n```\r\n\r\n### Default Currency\r\n\r\nBy default `Money` defaults to USD as its currency. This can be overwritten\r\nusing:\r\n\r\n``` ruby\r\nMoney.default_currency = Money::Currency.new(\"CAD\")\r\n```\r\n\r\nIf you use Rails, then `environment.rb` is a very good place to put this.\r\n\r\n### Currency Exponent\r\n\r\nThe exponent of a money value is the number of digits after the decimal\r\nseparator (which separates the major unit from the minor unit). See e.g.\r\n[Wikipedia on ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) for more\r\ninformation.  You can find the exponent (as a `Float`) by\r\n\r\n``` ruby\r\nMoney::Currency.new(\"USD\").exponent  # => 2.0\r\nMoney::Currency.new(\"JPY\").exponent  # => 0.0\r\nMoney::Currency.new(\"MGA\").exponent  # => 0.6989700043360189\r\n```\r\n\r\n### Currency Lookup\r\n\r\nTo find a given currency by ISO 4217 numeric code (three digits) you can do\r\n\r\n``` ruby\r\nMoney::Currency.find_by_iso_numeric(978) #=> Money::Currency.new(:eur)\r\n```\r\n\r\n## Currency Exchange\r\n\r\nExchanging money is performed through an exchange bank object. The default\r\nexchange bank object requires one to manually specify the exchange rate. Here's\r\nan example of how it works:\r\n\r\n``` ruby\r\nMoney.add_rate(\"USD\", \"CAD\", 1.24515)\r\nMoney.add_rate(\"CAD\", \"USD\", 0.803115)\r\n\r\nMoney.us_dollar(100).exchange_to(\"CAD\")  # => Money.new(124, \"CAD\")\r\nMoney.ca_dollar(100).exchange_to(\"USD\")  # => Money.new(80, \"USD\")\r\n```\r\n\r\nComparison and arithmetic operations work as expected:\r\n\r\n``` ruby\r\nMoney.new(1000, \"USD\") <=> Money.new(900, \"USD\")   # => 1; 9.00 USD is smaller\r\nMoney.new(1000, \"EUR\") + Money.new(10, \"EUR\") == Money.new(1010, \"EUR\")\r\n\r\nMoney.add_rate(\"USD\", \"EUR\", 0.5)\r\nMoney.new(1000, \"EUR\") + Money.new(1000, \"USD\") == Money.new(1500, \"EUR\")\r\n```\r\n\r\nThere is nothing stopping you from creating bank objects which scrapes\r\n[XE](http://www.xe.com) for the current rates or just returns `rand(2)`:\r\n\r\n``` ruby\r\nMoney.default_bank = ExchangeBankWhichScrapesXeDotCom.new\r\n```\r\n\r\nIf you wish to disable automatic currency conversion to prevent arithmetic when\r\ncurrencies don't match:\r\n\r\n``` ruby\r\nMoney.disallow_currency_conversion!\r\n```\r\n\r\n### Implementations\r\n\r\nThe following is a list of Money.gem compatible currency exchange rate\r\nimplementations.\r\n\r\n- [eu_central_bank](http://github.com/RubyMoney/eu_central_bank)\r\n- [google_currency](http://github.com/RubyMoney/google_currency)\r\n- [nordea](https://github.com/k33l0r/nordea)\r\n- [nbrb_currency](https://github.com/slbug/nbrb_currency)\r\n- [money-open-exchange-rates](https://github.com/spk/money-open-exchange-rates)\r\n- [money-historical-bank](https://github.com/atwam/money-historical-bank)\r\n- [russian_central_bank](https://github.com/rmustafin/russian_central_bank)\r\n\r\n## Ruby on Rails\r\n\r\nTo integrate money in a Rails application use [money-rails](http://github.com/RubyMoney/money-rails).\r\n\r\nFor deprecated methods of integrating with Rails, check [the wiki](https://github.com/RubyMoney/money/wiki).\r\n\r\n## Migration Notes\r\n\r\n#### Version 6.0.0\r\n\r\n- The `Money#dollars` and `Money#amount` methods now return instances of\r\n  `BigDecimal` rather than `Float`. We should avoid representing monetary\r\n  values with floating point types so to avoid a whole class of errors relating\r\n  to lack of precision. There are two migration options for this change:\r\n  * The first is to test your application and where applicable update the\r\n    application to accept a `BigDecimal` return value. This is the recommended\r\n    path.\r\n  * The second is to migrate from the `#amount` and `#dollars` methods to use\r\n    the `#to_f` method instead. This option should only be used where `Float`\r\n    is the desired type and nothing else will do for your application's\r\n    requirements.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}